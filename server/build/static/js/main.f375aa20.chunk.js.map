{"version":3,"sources":["ChatApp.js","serviceWorker.js","index.js"],"names":["URL","ChatApp","state","messages","currentUser","currentMessageBody","ws","WebSocket","submitMessageToChat","e","preventDefault","now","Date","newMessage","getHours","getMinutes","send","JSON","stringify","allMessages","setState","handleMessageChange","event","target","value","submitName","newUser","userJoinedMessage","this","onopen","console","log","onmessage","rawMessage","data","incomingMessage","parse","onclose","renderedMessages","map","message","className","Component","MessageInputBox","onSubmit","type","placeholder","onChange","Message","name","userName","timestamp","messageBody","EnterNameInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f375aa20.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './ChatApp.css';\n\nconst URL = 'wss://ivyhacks-chat.herokuapp.com/'\n\n// Message types\nconst NEW_USER_JOINED = \"NEW_USER_JOINED\"\nconst NEW_MESSAGE = \"NEW_MESSAGE\"\n\n// Represents the \nclass ChatApp extends Component {\n\n  state = {\n    // A Message consists of: User Name that Sent, Message Body, Timestamp\n    messages: [],\n    currentUser: \"\",\n    currentMessageBody: \"\"\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log(\"Connected!\")\n    }\n\n    // When receiving a message through the socket,\n    // add it to the state\n    this.ws.onmessage = (event) => {\n      console.log(event)\n      const rawMessage = event.data\n      if (rawMessage === \"ping\") {\n        this.ws.send(\"pong\")\n      }\n      else {\n        const incomingMessage = JSON.parse(rawMessage)\n        const allMessages = [...this.state.messages, incomingMessage]\n        this.setState({messages: allMessages})\n      }\n    }\n\n    this.ws.onclose = () => {\n      console.log(\"disconnected\")\n    }\n  }\n\n  // Submit message to be broadcasted to chat room\n  submitMessageToChat = (e) => {\n    e.preventDefault() // Prevent page from reloading\n    const { currentUser, currentMessageBody } = this.state\n    const now = new Date()\n    const timestamp = now.getHours() + \":\" + now.getMinutes()\n    const newMessage = {\"type\": NEW_MESSAGE, \"userName\": currentUser, \"messageBody\": currentMessageBody, \"timestamp\": timestamp}\n    // Send message through socket\n    this.ws.send(JSON.stringify(newMessage))\n\n    // Add message to state and reset currentMessage\n    const allMessages = [...this.state.messages, newMessage]\n    this.setState({messages: allMessages})\n    this.setState({currentMessageBody: \"\"})\n  }\n\n  handleMessageChange = (event) => {\n    this.setState({currentMessageBody: event.target.value})\n  }\n\n  submitName = (e) => {\n    e.preventDefault()\n    const newUser = e.target[0].value\n    this.setState({currentUser: newUser})\n    const userJoinedMessage = {\"type\": NEW_USER_JOINED, \"userName\": newUser}\n    this.ws.send(JSON.stringify(userJoinedMessage))\n  }\n\n  render() {\n    const renderedMessages = this.state.messages.map((message) => <Message message={message} \n    currentUser={this.state.currentUser}/>)\n    return (\n      <div className=\"container-flex\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h2 className=\"header\">üëãüèæWelcome {this.state.currentUser} to the IvyHacks Chat App</h2> \n          </div>\n        </div>\n        <div className=\"row all-messages\">\n          <div className=\"col\">\n            {renderedMessages}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <MessageInputBox submitMessageToChat={this.submitMessageToChat} \n          handleMessageChange={this.handleMessageChange} currentMessageBody={this.state.currentMessageBody}\n          currentUser={this.state.currentUser} submitName={this.submitName}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Represent writing and submitting a new message\n// into the chat\nconst MessageInputBox = ({submitMessageToChat, handleMessageChange, currentMessageBody, currentUser, submitName}) => {\n  if (currentUser) {\n    return (\n      <>\n        <form className=\"fixed-bottom message-input-box\" onSubmit={submitMessageToChat}>\n          <div className=\"form-group\">\n            <input className=\"form-control new-message\" type=\"text\" placeholder=\"Enter a new message\" value={currentMessageBody} onChange={handleMessageChange} />\n            <input className=\"submit-button\" type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </>\n    )\n  }\n  return (\n    <EnterNameInput submitName={submitName}/>\n  )\n}\n\n// Represents a Message in the Chat\nconst Message = ({message, currentUser}) => {\n  const name = message.userName === currentUser ? \"You\" : message.userName\n  if (message.type === NEW_MESSAGE) {\n    return (\n      <>\n        <div>\n          <p className=\"message\"><b> {message.timestamp} - {name}: </b>{message.messageBody}</p>\n        </div>\n      </>\n    )\n  }\n  if (message.type === NEW_USER_JOINED) {\n    return (\n      <>\n        <div>\n          <p className=\"user-joined\">{message.userName} has joined the chat</p>\n        </div>\n      </>\n    )\n  }\n}\n\n// Represents Input To Join Chat\nconst EnterNameInput = ({submitName}) => {\n  return (\n    <>\n      <form className=\"fixed-bottom name-input\" onSubmit={submitName}>\n        <div className=\"form-group input-group\">\n          <input className=\"form-control\" type=\"text\" name=\"username\" placeholder=\"Enter Name to Start Chatting\" />\n        <div className=\"input-group-btn\"><input className=\"btn btn-primary\" type=\"submit\" value=\"Submit\" /></div>\n        </div>\n      </form>\n    </>\n  )\n}\n\nexport default ChatApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatApp from './ChatApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}